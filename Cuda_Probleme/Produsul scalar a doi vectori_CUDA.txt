#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <iostream>

//Implementati un program CUDA ce efectueaza produsul scalar a doi vectori

__global__ void vector_vector(float *A, float *B, float *C)
{
	//7. Calculati valoarea celor indicelui i utilizand variabilele predefinite
	//blockDim, blockIdx, threshIdx, 
	int i = blockDim.x * blockIdx.x + threadIdx.x;

	//8. Efectuati produsul vectorilor si scrieti rez in c.
	C[i] = A[i] * B[i];
}

void main()
{
	//numarul de linii / coloane
	int N = 1024;

	//vectori host
	float *A_h;
	float *B_h;
	float *C_h; // rezultat

	//size_t size = N*N*sizeof(float);

	//1. Alocati memorie pe host pentru cei 3 vectori:
	A_h = new float[N];
	B_h = new float[N];
	C_h = new float[N];

	//2. Initializati cei doi vectoro A_h si B_h astfel:
	// - A_h are elementele 2
	// - B_h are elementele 3

	//Initializare A_h si B_h
	for (int dim = 0; dim < N; ++dim)
	{
		A_h[dim] = 2;
		B_h[dim] = 3;
	}

	//vectori device
	float *A_d;
	float *B_d;
	float *C_d;

	//3. Alocare memorie pe device
	cudaMalloc((void**)&A_d, N * sizeof(float));
	cudaMalloc((void**)&B_d, N * sizeof(float));
	cudaMalloc((void**)&C_d, N * sizeof(float));

	//4. Copiati continutul celor doi vectori A_h si B_h de pe host pe device
	//!!! primul parametru este destinatia, al doilea este sursa
	cudaMemcpy(A_d, A_h, N * sizeof(float), cudaMemcpyHostToDevice);
	cudaMemcpy(B_d, B_h, N * sizeof(float), cudaMemcpyHostToDevice);

	//Numarul de thread-uri pe bloc
	dim3 threadsPerBlock;
	threadsPerBlock.x = 32;
	threadsPerBlock.y = 1;
	threadsPerBlock.z = 1;

	//Numarul de blocuri
	dim3 numBlocks;

	//5. Calculati nr de blocuri astfel:
	// - se obtine un grid 2D de thread-uri
	// - se va lansa in executie cate un thread pt fiecare element din matrice -> deci in total N*N
	numBlocks.x = N/32;
	numBlocks.y = 1;
	numBlocks.z = 1;

	//Se lanseaza in executie kernel-ul CUDA
	vector_vector << <numBlocks, threadsPerBlock >> > (A_d, B_d, C_d);

	//6. Copiati continutul vectorului rezultat C de pe device pe host
	//!!! primul parametru este destinatia, iar al doilea este sursa
	cudaMemcpy(C_h, C_d, N * sizeof(float), cudaMemcpyDeviceToHost);

	//Afisare produs
	for (int dim = 0; dim < 32; ++dim)
	{
		std::cout << C_h[dim] << " ";
	}

	delete[] A_h;
	delete[] B_h;
	delete[] C_h;
	cudaFree(A_d);
	cudaFree(B_d);
	cudaFree(C_d);
}