#include <iostream>
#include <omp.h>
#include <time.h>

//Adunarea a doua matrice cu N linii si N coloane.
//Paralelizarea programului cu OpenMP

void main()
{
	//nr. linii / coloane
	int N = 4; //1000 trebuie sa fie

	//3 matrice 
	int *A; //prima matrice
	int *B; //a doua matrice
	int *C; //matricea rezultat

	//1. Alocare memorie pentru cele 3 matrice.
	A = new int[N*N];
	B = new int[N*N];
	C = new int[N*N];

	//2. Initializare matrice A si B astfel:
	// - elementele de pe prima coloana au valoarea 1
	// - elementele de pe a doua coloana au valoarea 2
	// - elementele de pe a treia coloana au valoarea 3 etc
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			A[rows * N + cols] = cols + 1;
			B[rows * N + cols] = cols + 1;
		}
	}

	//verificare matrice A
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			std::cout << A[rows * N + cols] << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";

	//verificare matrice B
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			std::cout << B[rows * N + cols] << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";

	//3. Suma celor doua matrice -> in matricea C
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			C[rows * N + cols] = A[rows * N + cols] + B[rows * N + cols];
		}
	}

	//verificare matrice C
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			std::cout << C[rows * N + cols] << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";

	//4. Suma celor doua matrice -> varianta paralela
	//pentru ca s-a rezolvat si mai sus cerinta, initializam mai intai matricea C cu 0
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			C[rows * N + cols] = 0;
		}
	}

	omp_set_num_threads(4);

#pragma omp parallel
	{
		int id = omp_get_thread_num();
		int nrThreads = omp_get_num_threads();
		int iStart = id * N / nrThreads;
		int iEnd = (id + 1)*N / nrThreads;

		for (int rows = iStart; rows < iEnd; ++rows)
		{
			for (int cols = 0; cols < N; ++cols)
			{
				C[rows * N + cols] = A[rows * N + cols] + B[rows * N + cols];
			}
		}
	}

	//verificare matrice C
	for (int rows = 0; rows < N; ++rows)
	{
		for (int cols = 0; cols < N; ++cols)
		{
			std::cout << C[rows * N + cols] << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";
	
	//dealocare memorie
	delete[] A;
	delete[] B;
	delete[] C;
}